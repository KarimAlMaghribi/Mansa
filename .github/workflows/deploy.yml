name: Build & Deploy

on:
  push:
    branches: [ main ]

jobs:
  frontend:
    name: Build & Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        env:
          CI: ""
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.REACT_APP_FIREBASE_API_KEY || vars.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.REACT_APP_FIREBASE_AUTH_DOMAIN || vars.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.REACT_APP_FIREBASE_PROJECT_ID || vars.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.REACT_APP_FIREBASE_STORAGE_BUCKET || vars.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.REACT_APP_FIREBASE_MESSAGING_SENDER_ID || vars.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.REACT_APP_FIREBASE_APP_ID || vars.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.REACT_APP_FIREBASE_MEASUREMENT_ID || vars.REACT_APP_FIREBASE_MEASUREMENT_ID }}
        run: npm run build

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        working-directory: frontend
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        run: firebase deploy --token "$FIREBASE_TOKEN" --only hosting

  backend:
    name: Build & Deploy Backend
    runs-on: ubuntu-latest
    needs: frontend
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id:        ${{ secrets.GCP_PROJECT }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Configure Docker for GCR & GAR
        run: |
          gcloud auth configure-docker gcr.io,us-docker.pkg.dev --quiet

      - name: Build backend image
        run: |
          docker build \
            -t gcr.io/${{ secrets.GCP_PROJECT }}/mansa-backend:latest \
            ./backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Push backend to GCR
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT }}/mansa-backend:latest

      - name: Deploy to Cloud Run with Cloud SQL Proxy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: mansa-backend
          region: europe-west3
          image: gcr.io/${{ secrets.GCP_PROJECT }}/mansa-backend:latest
          project_id: ${{ secrets.GCP_PROJECT }}
          env_vars: |
            SPRING_DATASOURCE_URL=jdbc:mysql:///mansa?cloudSqlInstance=${{ secrets.GCP_PROJECT }}:europe-west3:mansa-db&socketFactory=com.google.cloud.sql.mysql.SocketFactory&useSSL=false
          secrets: |
            SPRING_DATASOURCE_USERNAME=spring-datasource-username:latest
            SPRING_DATASOURCE_PASSWORD=spring-datasource-password:latest
          flags: |
            --platform=managed
            --allow-unauthenticated
            --add-cloudsql-instances=${{ secrets.GCP_PROJECT }}:europe-west3:mansa-db
